// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fw.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ACEMatch struct {
	Type  string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ACEMatch) Reset()                    { *m = ACEMatch{} }
func (m *ACEMatch) String() string            { return proto.CompactTextString(m) }
func (*ACEMatch) ProtoMessage()               {}
func (*ACEMatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ACEMatch) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ACEMatch) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ACEAction struct {
	Drop       bool   `protobuf:"varint,1,opt,name=drop" json:"drop,omitempty"`
	Limit      bool   `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Limitrate  uint32 `protobuf:"varint,3,opt,name=limitrate" json:"limitrate,omitempty"`
	Limitunit  string `protobuf:"bytes,4,opt,name=limitunit" json:"limitunit,omitempty"`
	Limitburst uint32 `protobuf:"varint,5,opt,name=limitburst" json:"limitburst,omitempty"`
}

func (m *ACEAction) Reset()                    { *m = ACEAction{} }
func (m *ACEAction) String() string            { return proto.CompactTextString(m) }
func (*ACEAction) ProtoMessage()               {}
func (*ACEAction) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ACEAction) GetDrop() bool {
	if m != nil {
		return m.Drop
	}
	return false
}

func (m *ACEAction) GetLimit() bool {
	if m != nil {
		return m.Limit
	}
	return false
}

func (m *ACEAction) GetLimitrate() uint32 {
	if m != nil {
		return m.Limitrate
	}
	return 0
}

func (m *ACEAction) GetLimitunit() string {
	if m != nil {
		return m.Limitunit
	}
	return ""
}

func (m *ACEAction) GetLimitburst() uint32 {
	if m != nil {
		return m.Limitburst
	}
	return 0
}

type ACE struct {
	Matches []*ACEMatch  `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	Actions []*ACEAction `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
}

func (m *ACE) Reset()                    { *m = ACE{} }
func (m *ACE) String() string            { return proto.CompactTextString(m) }
func (*ACE) ProtoMessage()               {}
func (*ACE) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ACE) GetMatches() []*ACEMatch {
	if m != nil {
		return m.Matches
	}
	return nil
}

func (m *ACE) GetActions() []*ACEAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

func init() {
	proto.RegisterType((*ACEMatch)(nil), "ACEMatch")
	proto.RegisterType((*ACEAction)(nil), "ACEAction")
	proto.RegisterType((*ACE)(nil), "ACE")
}

func init() { proto.RegisterFile("fw.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0xbb, 0x6e, 0xb3, 0x30,
	0x14, 0x16, 0x21, 0xf9, 0x03, 0xe7, 0x57, 0x17, 0xab, 0x83, 0x87, 0x5e, 0x10, 0xed, 0xc0, 0x64,
	0xa4, 0xb6, 0x0f, 0x50, 0x8a, 0x18, 0x2b, 0x55, 0x1e, 0xbb, 0x19, 0xe3, 0x24, 0x96, 0x00, 0x23,
	0x63, 0xa7, 0x6a, 0xde, 0xa2, 0x6f, 0x5c, 0x71, 0x10, 0x49, 0xb7, 0xef, 0x2a, 0xfb, 0x3b, 0x10,
	0xed, 0xbe, 0xd8, 0x60, 0x8d, 0x33, 0xe9, 0x0b, 0x44, 0x45, 0x59, 0xbd, 0x0b, 0x27, 0x0f, 0x84,
	0xc0, 0xda, 0x7d, 0x0f, 0x8a, 0x06, 0x49, 0x90, 0xc5, 0x1c, 0x31, 0xb9, 0x86, 0xcd, 0x51, 0xb4,
	0x5e, 0xd1, 0x15, 0x8a, 0x33, 0x49, 0x7f, 0x02, 0x88, 0x8b, 0xb2, 0x2a, 0xa4, 0xd3, 0xa6, 0x9f,
	0x7a, 0x8d, 0x35, 0x03, 0xf6, 0x22, 0x8e, 0x78, 0xea, 0xb5, 0xba, 0xd3, 0x0e, 0x7b, 0x11, 0x9f,
	0x09, 0xb9, 0x81, 0x18, 0x81, 0x15, 0x4e, 0xd1, 0x30, 0x09, 0xb2, 0x2b, 0x7e, 0x11, 0xce, 0xae,
	0xef, 0xb5, 0xa3, 0x6b, 0x7c, 0xef, 0x22, 0x90, 0x3b, 0x00, 0x24, 0xb5, 0xb7, 0xa3, 0xa3, 0x1b,
	0x2c, 0xff, 0x51, 0xd2, 0x0f, 0x08, 0x8b, 0xb2, 0x22, 0x0f, 0xb0, 0xed, 0xa6, 0x35, 0x6a, 0xa4,
	0x41, 0x12, 0x66, 0xff, 0x9f, 0x62, 0xb6, 0x0c, 0xe4, 0x8b, 0x43, 0x1e, 0x61, 0x2b, 0xf0, 0xef,
	0x23, 0x5d, 0x61, 0x08, 0xd8, 0x79, 0x0e, 0x5f, 0xac, 0xb7, 0x57, 0xb8, 0x97, 0xa6, 0x63, 0x27,
	0xd5, 0xa8, 0x46, 0x30, 0xd9, 0x1a, 0xdf, 0x30, 0x3f, 0x2a, 0x7b, 0xd4, 0x52, 0xcd, 0xe7, 0xfb,
	0xbc, 0xdd, 0x6b, 0x77, 0xf0, 0x35, 0x93, 0xa6, 0xcb, 0xe7, 0x5c, 0x2e, 0x06, 0x9d, 0x9f, 0xa4,
	0xe9, 0x77, 0x7a, 0x5f, 0xff, 0xc3, 0xd4, 0xf3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x61,
	0xf2, 0xf1, 0x70, 0x01, 0x00, 0x00,
}

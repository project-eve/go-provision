// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netconfig.proto

/*
Package zconfig is a generated protocol buffer package.

It is generated from these files:
	netconfig.proto
	fw.proto
	vm.proto
	devconfig.proto
	storage.proto
	devcommon.proto
	appconfig.proto
	netcmn.proto
	network.proto
	baseosconfig.proto

It has these top-level messages:
	NetworkConfig
	NetworkAdapter
	ACEMatch
	ACEAction
	ACE
	VmConfig
	MapServer
	ZedServer
	DeviceLispDetails
	DeviceOpsCmd
	EdgeDevConfig
	ConfigHash
	SignatureInfo
	DatastoreConfig
	Image
	Drive
	UUIDandVersion
	AppInstanceConfig
	Ipv4Spec
	Ipv6Spec
	NameToEid
	EIDAllocation
	Lispspec
	L2Spec
	NetworkParam
	NetworkIf
	OSKeyTags
	OSVerDetails
	BaseOSConfig
*/
package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NetworkConfig struct {
	Id   string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type NetworkType `protobuf:"varint,5,opt,name=type,enum=NetworkType" json:"type,omitempty"`
	// Types that are valid to be assigned to NetContent:
	//	*NetworkConfig_Nl2
	//	*NetworkConfig_Nlisp
	//	*NetworkConfig_Nv4
	//	*NetworkConfig_Nv6
	NetContent isNetworkConfig_NetContent `protobuf_oneof:"netContent"`
}

func (m *NetworkConfig) Reset()                    { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()               {}
func (*NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isNetworkConfig_NetContent interface {
	isNetworkConfig_NetContent()
}

type NetworkConfig_Nl2 struct {
	Nl2 *L2Spec `protobuf:"bytes,8,opt,name=nl2,oneof"`
}
type NetworkConfig_Nlisp struct {
	Nlisp *Lispspec `protobuf:"bytes,9,opt,name=nlisp,oneof"`
}
type NetworkConfig_Nv4 struct {
	Nv4 *Ipv4Spec `protobuf:"bytes,10,opt,name=nv4,oneof"`
}
type NetworkConfig_Nv6 struct {
	Nv6 *Ipv6Spec `protobuf:"bytes,11,opt,name=nv6,oneof"`
}

func (*NetworkConfig_Nl2) isNetworkConfig_NetContent()   {}
func (*NetworkConfig_Nlisp) isNetworkConfig_NetContent() {}
func (*NetworkConfig_Nv4) isNetworkConfig_NetContent()   {}
func (*NetworkConfig_Nv6) isNetworkConfig_NetContent()   {}

func (m *NetworkConfig) GetNetContent() isNetworkConfig_NetContent {
	if m != nil {
		return m.NetContent
	}
	return nil
}

func (m *NetworkConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkConfig) GetType() NetworkType {
	if m != nil {
		return m.Type
	}
	return NetworkType_NETWORKTYPENOOP
}

func (m *NetworkConfig) GetNl2() *L2Spec {
	if x, ok := m.GetNetContent().(*NetworkConfig_Nl2); ok {
		return x.Nl2
	}
	return nil
}

func (m *NetworkConfig) GetNlisp() *Lispspec {
	if x, ok := m.GetNetContent().(*NetworkConfig_Nlisp); ok {
		return x.Nlisp
	}
	return nil
}

func (m *NetworkConfig) GetNv4() *Ipv4Spec {
	if x, ok := m.GetNetContent().(*NetworkConfig_Nv4); ok {
		return x.Nv4
	}
	return nil
}

func (m *NetworkConfig) GetNv6() *Ipv6Spec {
	if x, ok := m.GetNetContent().(*NetworkConfig_Nv6); ok {
		return x.Nv6
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NetworkConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NetworkConfig_OneofMarshaler, _NetworkConfig_OneofUnmarshaler, _NetworkConfig_OneofSizer, []interface{}{
		(*NetworkConfig_Nl2)(nil),
		(*NetworkConfig_Nlisp)(nil),
		(*NetworkConfig_Nv4)(nil),
		(*NetworkConfig_Nv6)(nil),
	}
}

func _NetworkConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NetworkConfig)
	// netContent
	switch x := m.NetContent.(type) {
	case *NetworkConfig_Nl2:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nl2); err != nil {
			return err
		}
	case *NetworkConfig_Nlisp:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nlisp); err != nil {
			return err
		}
	case *NetworkConfig_Nv4:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nv4); err != nil {
			return err
		}
	case *NetworkConfig_Nv6:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nv6); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NetworkConfig.NetContent has unexpected type %T", x)
	}
	return nil
}

func _NetworkConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NetworkConfig)
	switch tag {
	case 8: // netContent.nl2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L2Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkConfig_Nl2{msg}
		return true, err
	case 9: // netContent.nlisp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Lispspec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkConfig_Nlisp{msg}
		return true, err
	case 10: // netContent.nv4
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ipv4Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkConfig_Nv4{msg}
		return true, err
	case 11: // netContent.nv6
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ipv6Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkConfig_Nv6{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NetworkConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NetworkConfig)
	// netContent
	switch x := m.NetContent.(type) {
	case *NetworkConfig_Nl2:
		s := proto.Size(x.Nl2)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkConfig_Nlisp:
		s := proto.Size(x.Nlisp)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkConfig_Nv4:
		s := proto.Size(x.Nv4)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkConfig_Nv6:
		s := proto.Size(x.Nv6)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NetworkAdapter struct {
	// this is deviceName....
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	NetworkId string `protobuf:"bytes,3,opt,name=networkId" json:"networkId,omitempty"`
	// eid=lisp, v4=ipv4 etc...
	Addr     string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
	Hostname string `protobuf:"bytes,5,opt,name=hostname" json:"hostname,omitempty"`
	// more configuration for getting addr
	Lispsignature string `protobuf:"bytes,6,opt,name=lispsignature" json:"lispsignature,omitempty"`
	Pemcert       []byte `protobuf:"bytes,7,opt,name=pemcert,proto3" json:"pemcert,omitempty"`
	Pemprivatekey []byte `protobuf:"bytes,8,opt,name=pemprivatekey,proto3" json:"pemprivatekey,omitempty"`
	// firewall
	Acls []*ACE `protobuf:"bytes,40,rep,name=acls" json:"acls,omitempty"`
}

func (m *NetworkAdapter) Reset()                    { *m = NetworkAdapter{} }
func (m *NetworkAdapter) String() string            { return proto.CompactTextString(m) }
func (*NetworkAdapter) ProtoMessage()               {}
func (*NetworkAdapter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NetworkAdapter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkAdapter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkAdapter) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *NetworkAdapter) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NetworkAdapter) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NetworkAdapter) GetLispsignature() string {
	if m != nil {
		return m.Lispsignature
	}
	return ""
}

func (m *NetworkAdapter) GetPemcert() []byte {
	if m != nil {
		return m.Pemcert
	}
	return nil
}

func (m *NetworkAdapter) GetPemprivatekey() []byte {
	if m != nil {
		return m.Pemprivatekey
	}
	return nil
}

func (m *NetworkAdapter) GetAcls() []*ACE {
	if m != nil {
		return m.Acls
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkConfig)(nil), "NetworkConfig")
	proto.RegisterType((*NetworkAdapter)(nil), "NetworkAdapter")
}

func init() { proto.RegisterFile("netconfig.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0x3d, 0x6f, 0xdb, 0x30,
	0x10, 0xad, 0x6c, 0x39, 0xb6, 0xcf, 0x8a, 0x0b, 0x70, 0x22, 0xd2, 0x06, 0x55, 0x83, 0x0e, 0x9a,
	0x68, 0x40, 0x35, 0x3c, 0x37, 0x31, 0x0a, 0xb4, 0x4b, 0x07, 0xa1, 0x53, 0x37, 0x86, 0xbc, 0x38,
	0x44, 0x24, 0x92, 0xa0, 0x28, 0x05, 0xce, 0xd8, 0xff, 0xd7, 0xff, 0x54, 0x88, 0x54, 0x6c, 0x64,
	0xbb, 0xf7, 0x71, 0x0f, 0x7c, 0x24, 0xe1, 0xbd, 0x46, 0x2f, 0x8c, 0x7e, 0x50, 0x07, 0x66, 0x9d,
	0xf1, 0xe6, 0x6a, 0xf1, 0xf0, 0x3c, 0x4e, 0xd9, 0x20, 0x35, 0x3a, 0xa2, 0x9b, 0x7f, 0x09, 0x5c,
	0xfe, 0x42, 0xff, 0x6c, 0xdc, 0xd3, 0x3e, 0xf8, 0xc9, 0x1a, 0x26, 0x4a, 0xd2, 0x24, 0x4f, 0x8a,
	0x65, 0x35, 0x51, 0x92, 0xe4, 0x90, 0xfa, 0xa3, 0x45, 0x3a, 0xcb, 0x93, 0x62, 0x5d, 0x66, 0x6c,
	0x74, 0xff, 0x3e, 0x5a, 0xac, 0x82, 0x42, 0x3e, 0xc0, 0x54, 0xd7, 0x25, 0x5d, 0xe4, 0x49, 0xb1,
	0x2a, 0xe7, 0xac, 0x2e, 0x5b, 0x8b, 0xe2, 0xc7, 0xbb, 0x6a, 0x60, 0xc9, 0x67, 0x98, 0xe9, 0x5a,
	0xb5, 0x96, 0x2e, 0x83, 0xbc, 0x64, 0x03, 0x18, 0x0d, 0x51, 0x21, 0xd7, 0x30, 0xd5, 0xfd, 0x96,
	0xc2, 0x68, 0x50, 0xb6, 0xdf, 0x9e, 0x12, 0xfa, 0x6d, 0x94, 0x77, 0x74, 0x75, 0x96, 0x77, 0x67,
	0x79, 0x77, 0x97, 0x01, 0x68, 0xf4, 0x7b, 0xa3, 0x3d, 0x6a, 0x7f, 0xf3, 0x77, 0x02, 0xeb, 0xf1,
	0x84, 0xb7, 0x92, 0x5b, 0x8f, 0x8e, 0x10, 0x48, 0x35, 0x6f, 0x70, 0xac, 0x14, 0xe6, 0xb1, 0xe4,
	0xe4, 0x54, 0xf2, 0x23, 0x2c, 0x75, 0xdc, 0xfa, 0x29, 0xe9, 0x34, 0xd0, 0x67, 0x62, 0x48, 0xe0,
	0x52, 0x3a, 0x9a, 0xc6, 0x84, 0x61, 0x26, 0x57, 0xb0, 0x78, 0x34, 0xad, 0x0f, 0xc9, 0xb3, 0xc0,
	0x9f, 0x30, 0xf9, 0x02, 0x97, 0xa1, 0xa5, 0x3a, 0x68, 0xee, 0x3b, 0x87, 0xf4, 0x22, 0x18, 0xde,
	0x92, 0x84, 0xc2, 0xdc, 0x62, 0x23, 0xd0, 0x79, 0x3a, 0xcf, 0x93, 0x22, 0xab, 0x5e, 0xe1, 0xb0,
	0x6f, 0xb1, 0xb1, 0x4e, 0xf5, 0xdc, 0xe3, 0x13, 0x1e, 0xc3, 0xd5, 0x66, 0xd5, 0x5b, 0x92, 0x50,
	0x48, 0xb9, 0xa8, 0x5b, 0x5a, 0xe4, 0xd3, 0x62, 0x55, 0xa6, 0xec, 0x76, 0xff, 0xbd, 0x0a, 0xcc,
	0xdd, 0x37, 0xf8, 0x24, 0x4c, 0xc3, 0x5e, 0x50, 0xa2, 0xe4, 0x4c, 0xd4, 0xa6, 0x93, 0xac, 0x6b,
	0xd1, 0xf5, 0x4a, 0x60, 0x7c, 0xf7, 0x3f, 0xd7, 0x07, 0xe5, 0x1f, 0xbb, 0x7b, 0x26, 0x4c, 0xb3,
	0x89, 0xbe, 0x0d, 0xb7, 0x6a, 0xf3, 0x12, 0x3f, 0xcd, 0xfd, 0x45, 0x70, 0x7d, 0xfd, 0x1f, 0x00,
	0x00, 0xff, 0xff, 0x5b, 0xfc, 0x5e, 0x15, 0x48, 0x02, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: network.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NetworkKind int32

const (
	NetworkKind_NETWORKKINGNOOP NetworkKind = 0
	NetworkKind_UNDERLAY        NetworkKind = 1
	NetworkKind_OVERLAY         NetworkKind = 2
)

var NetworkKind_name = map[int32]string{
	0: "NETWORKKINGNOOP",
	1: "UNDERLAY",
	2: "OVERLAY",
}
var NetworkKind_value = map[string]int32{
	"NETWORKKINGNOOP": 0,
	"UNDERLAY":        1,
	"OVERLAY":         2,
}

func (x NetworkKind) String() string {
	return proto.EnumName(NetworkKind_name, int32(x))
}
func (NetworkKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type NetworkState int32

const (
	NetworkState_NSTATENOOP NetworkState = 0
	NetworkState_NARCHIVE   NetworkState = 1
	NetworkState_NACTIVE    NetworkState = 2
	NetworkState_NINACTIVE  NetworkState = 3
)

var NetworkState_name = map[int32]string{
	0: "NSTATENOOP",
	1: "NARCHIVE",
	2: "NACTIVE",
	3: "NINACTIVE",
}
var NetworkState_value = map[string]int32{
	"NSTATENOOP": 0,
	"NARCHIVE":   1,
	"NACTIVE":    2,
	"NINACTIVE":  3,
}

func (x NetworkState) String() string {
	return proto.EnumName(NetworkState_name, int32(x))
}
func (NetworkState) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

type NetworkParam struct {
	Id      string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Project string      `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
	Desc    string      `protobuf:"bytes,4,opt,name=desc" json:"desc,omitempty"`
	Type    NetworkType `protobuf:"varint,5,opt,name=type,enum=NetworkType" json:"type,omitempty"`
	Kind    NetworkKind `protobuf:"varint,6,opt,name=kind,enum=NetworkKind" json:"kind,omitempty"`
	// Types that are valid to be assigned to NetContent:
	//	*NetworkParam_Nl2
	//	*NetworkParam_Nlisp
	//	*NetworkParam_Nv4
	//	*NetworkParam_Nv6
	NetContent isNetworkParam_NetContent `protobuf_oneof:"netContent"`
	State      NetworkState              `protobuf:"varint,12,opt,name=state,enum=NetworkState" json:"state,omitempty"`
}

func (m *NetworkParam) Reset()                    { *m = NetworkParam{} }
func (m *NetworkParam) String() string            { return proto.CompactTextString(m) }
func (*NetworkParam) ProtoMessage()               {}
func (*NetworkParam) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type isNetworkParam_NetContent interface {
	isNetworkParam_NetContent()
}

type NetworkParam_Nl2 struct {
	Nl2 *L2Spec `protobuf:"bytes,8,opt,name=nl2,oneof"`
}
type NetworkParam_Nlisp struct {
	Nlisp *Lispspec `protobuf:"bytes,9,opt,name=nlisp,oneof"`
}
type NetworkParam_Nv4 struct {
	Nv4 *Ipv4Spec `protobuf:"bytes,10,opt,name=nv4,oneof"`
}
type NetworkParam_Nv6 struct {
	Nv6 *Ipv6Spec `protobuf:"bytes,11,opt,name=nv6,oneof"`
}

func (*NetworkParam_Nl2) isNetworkParam_NetContent()   {}
func (*NetworkParam_Nlisp) isNetworkParam_NetContent() {}
func (*NetworkParam_Nv4) isNetworkParam_NetContent()   {}
func (*NetworkParam_Nv6) isNetworkParam_NetContent()   {}

func (m *NetworkParam) GetNetContent() isNetworkParam_NetContent {
	if m != nil {
		return m.NetContent
	}
	return nil
}

func (m *NetworkParam) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkParam) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *NetworkParam) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *NetworkParam) GetType() NetworkType {
	if m != nil {
		return m.Type
	}
	return NetworkType_NETWORKTYPENOOP
}

func (m *NetworkParam) GetKind() NetworkKind {
	if m != nil {
		return m.Kind
	}
	return NetworkKind_NETWORKKINGNOOP
}

func (m *NetworkParam) GetNl2() *L2Spec {
	if x, ok := m.GetNetContent().(*NetworkParam_Nl2); ok {
		return x.Nl2
	}
	return nil
}

func (m *NetworkParam) GetNlisp() *Lispspec {
	if x, ok := m.GetNetContent().(*NetworkParam_Nlisp); ok {
		return x.Nlisp
	}
	return nil
}

func (m *NetworkParam) GetNv4() *Ipv4Spec {
	if x, ok := m.GetNetContent().(*NetworkParam_Nv4); ok {
		return x.Nv4
	}
	return nil
}

func (m *NetworkParam) GetNv6() *Ipv6Spec {
	if x, ok := m.GetNetContent().(*NetworkParam_Nv6); ok {
		return x.Nv6
	}
	return nil
}

func (m *NetworkParam) GetState() NetworkState {
	if m != nil {
		return m.State
	}
	return NetworkState_NSTATENOOP
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NetworkParam) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NetworkParam_OneofMarshaler, _NetworkParam_OneofUnmarshaler, _NetworkParam_OneofSizer, []interface{}{
		(*NetworkParam_Nl2)(nil),
		(*NetworkParam_Nlisp)(nil),
		(*NetworkParam_Nv4)(nil),
		(*NetworkParam_Nv6)(nil),
	}
}

func _NetworkParam_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NetworkParam)
	// netContent
	switch x := m.NetContent.(type) {
	case *NetworkParam_Nl2:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nl2); err != nil {
			return err
		}
	case *NetworkParam_Nlisp:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nlisp); err != nil {
			return err
		}
	case *NetworkParam_Nv4:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nv4); err != nil {
			return err
		}
	case *NetworkParam_Nv6:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nv6); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NetworkParam.NetContent has unexpected type %T", x)
	}
	return nil
}

func _NetworkParam_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NetworkParam)
	switch tag {
	case 8: // netContent.nl2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L2Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkParam_Nl2{msg}
		return true, err
	case 9: // netContent.nlisp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Lispspec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkParam_Nlisp{msg}
		return true, err
	case 10: // netContent.nv4
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ipv4Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkParam_Nv4{msg}
		return true, err
	case 11: // netContent.nv6
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ipv6Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkParam_Nv6{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NetworkParam_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NetworkParam)
	// netContent
	switch x := m.NetContent.(type) {
	case *NetworkParam_Nl2:
		s := proto.Size(x.Nl2)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkParam_Nlisp:
		s := proto.Size(x.Nlisp)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkParam_Nv4:
		s := proto.Size(x.Nv4)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkParam_Nv6:
		s := proto.Size(x.Nv6)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NetworkIf struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	NetworkId string `protobuf:"bytes,3,opt,name=networkId" json:"networkId,omitempty"`
	// eid=lisp, v4=ipv4 etc...
	Addr     string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
	Hostname string `protobuf:"bytes,5,opt,name=hostname" json:"hostname,omitempty"`
	// more configuration for getting addr
	Lispsignature string `protobuf:"bytes,6,opt,name=lispsignature" json:"lispsignature,omitempty"`
	Pemcert       []byte `protobuf:"bytes,7,opt,name=pemcert,proto3" json:"pemcert,omitempty"`
	Pemprivatekey []byte `protobuf:"bytes,8,opt,name=pemprivatekey,proto3" json:"pemprivatekey,omitempty"`
	// firewall
	Acls []*ACE `protobuf:"bytes,40,rep,name=acls" json:"acls,omitempty"`
}

func (m *NetworkIf) Reset()                    { *m = NetworkIf{} }
func (m *NetworkIf) String() string            { return proto.CompactTextString(m) }
func (*NetworkIf) ProtoMessage()               {}
func (*NetworkIf) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *NetworkIf) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkIf) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkIf) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *NetworkIf) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NetworkIf) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NetworkIf) GetLispsignature() string {
	if m != nil {
		return m.Lispsignature
	}
	return ""
}

func (m *NetworkIf) GetPemcert() []byte {
	if m != nil {
		return m.Pemcert
	}
	return nil
}

func (m *NetworkIf) GetPemprivatekey() []byte {
	if m != nil {
		return m.Pemprivatekey
	}
	return nil
}

func (m *NetworkIf) GetAcls() []*ACE {
	if m != nil {
		return m.Acls
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkParam)(nil), "NetworkParam")
	proto.RegisterType((*NetworkIf)(nil), "NetworkIf")
	proto.RegisterEnum("NetworkKind", NetworkKind_name, NetworkKind_value)
	proto.RegisterEnum("NetworkState", NetworkState_name, NetworkState_value)
}

func init() { proto.RegisterFile("network.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x53, 0x4f, 0x6f, 0xda, 0x30,
	0x14, 0x6f, 0x02, 0x14, 0xf2, 0x08, 0x5d, 0xe5, 0x5d, 0xac, 0x6e, 0xd5, 0xb2, 0x6e, 0x87, 0xa8,
	0x87, 0x20, 0x31, 0xc4, 0x6d, 0xd2, 0x28, 0x43, 0x03, 0x31, 0x85, 0xca, 0x65, 0x9d, 0xb6, 0x5b,
	0x6a, 0x1b, 0xea, 0x41, 0x9c, 0x28, 0x31, 0x54, 0xf4, 0x7b, 0xee, 0xe3, 0x4c, 0x9a, 0x62, 0x07,
	0x28, 0xb7, 0xf7, 0xfb, 0xf3, 0x5e, 0x9e, 0x7e, 0x2f, 0x86, 0x96, 0xe4, 0xea, 0x29, 0xc9, 0x96,
	0x41, 0x9a, 0x25, 0x2a, 0xb9, 0x68, 0xcc, 0x9f, 0xca, 0xca, 0x95, 0x5c, 0xd1, 0x58, 0x1a, 0x74,
	0xf5, 0xd7, 0x06, 0x37, 0x34, 0xce, 0xdb, 0x28, 0x8b, 0x62, 0x74, 0x06, 0xb6, 0x60, 0xd8, 0xf2,
	0x2c, 0xdf, 0x21, 0xb6, 0x60, 0x08, 0x41, 0x55, 0x46, 0x31, 0xc7, 0xb6, 0x66, 0x74, 0x8d, 0x30,
	0xd4, 0xd3, 0x2c, 0xf9, 0xc3, 0xa9, 0xc2, 0x15, 0x4d, 0xef, 0x60, 0xe1, 0x66, 0x3c, 0xa7, 0xb8,
	0x6a, 0xdc, 0x45, 0x8d, 0x3c, 0xa8, 0xaa, 0x6d, 0xca, 0x71, 0xcd, 0xb3, 0xfc, 0xb3, 0x8e, 0x1b,
	0x94, 0x9f, 0x9b, 0x6d, 0x53, 0x4e, 0xb4, 0x52, 0x38, 0x96, 0x42, 0x32, 0x7c, 0x7a, 0xec, 0x98,
	0x08, 0xc9, 0x88, 0x56, 0xd0, 0x1b, 0xa8, 0xc8, 0x55, 0x07, 0x37, 0x3c, 0xcb, 0x6f, 0x76, 0xea,
	0xc1, 0xaa, 0x93, 0xa7, 0x9c, 0x8e, 0x4e, 0x48, 0xc1, 0xa2, 0xf7, 0x50, 0x93, 0x2b, 0x91, 0xa7,
	0xd8, 0xd1, 0xb2, 0x13, 0x14, 0xa0, 0x34, 0x18, 0x05, 0x5d, 0x42, 0x45, 0x6e, 0xba, 0x18, 0x4a,
	0x83, 0x48, 0x37, 0xdd, 0xfd, 0x84, 0x4d, 0xd7, 0xc8, 0x3d, 0xdc, 0x3c, 0xc8, 0xbd, 0x83, 0xdc,
	0x43, 0x1f, 0xa0, 0x96, 0xab, 0x48, 0x71, 0xec, 0xea, 0x05, 0x5b, 0xbb, 0x05, 0xef, 0x0a, 0x92,
	0x18, 0xed, 0xc6, 0x05, 0x90, 0x5c, 0x0d, 0x12, 0xa9, 0xb8, 0x54, 0x57, 0xff, 0x2c, 0x70, 0x4a,
	0xd7, 0x78, 0xbe, 0x0f, 0xd1, 0x7a, 0x11, 0xa2, 0x09, 0xda, 0xde, 0x07, 0xfd, 0x16, 0x9c, 0xf2,
	0x64, 0x63, 0x56, 0xc6, 0x7a, 0x20, 0x8a, 0x09, 0x11, 0x63, 0xd9, 0x2e, 0xd8, 0xa2, 0x46, 0x17,
	0xd0, 0x78, 0x4c, 0x72, 0xa5, 0x27, 0xd7, 0x34, 0xbf, 0xc7, 0xe8, 0x23, 0xb4, 0x74, 0x0a, 0x62,
	0x21, 0x23, 0xb5, 0xce, 0xb8, 0xce, 0xd6, 0x21, 0xc7, 0xa4, 0x3e, 0x24, 0x8f, 0x29, 0xcf, 0x14,
	0xae, 0x7b, 0x96, 0xef, 0x92, 0x1d, 0x2c, 0xfa, 0x53, 0x1e, 0xa7, 0x99, 0xd8, 0x44, 0x8a, 0x2f,
	0xf9, 0x56, 0x47, 0xef, 0x92, 0x63, 0x12, 0x61, 0xa8, 0x46, 0x74, 0x95, 0x63, 0xdf, 0xab, 0xf8,
	0xcd, 0x4e, 0x35, 0xe8, 0x0f, 0x86, 0x44, 0x33, 0xd7, 0x9f, 0xa1, 0xf9, 0xe2, 0x8a, 0xe8, 0x35,
	0xbc, 0x0a, 0x87, 0xb3, 0x9f, 0x53, 0x32, 0x99, 0x8c, 0xc3, 0x6f, 0xe1, 0x74, 0x7a, 0x7b, 0x7e,
	0x82, 0x5c, 0x68, 0xfc, 0x08, 0xbf, 0x0e, 0xc9, 0xf7, 0xfe, 0xaf, 0x73, 0x0b, 0x35, 0xa1, 0x3e,
	0xbd, 0x37, 0xc0, 0xbe, 0x1e, 0xed, 0xff, 0x4a, 0x9d, 0x31, 0x3a, 0x03, 0x08, 0xef, 0x66, 0xfd,
	0xd9, 0xf0, 0xd0, 0x1a, 0xf6, 0xc9, 0x60, 0x34, 0xbe, 0x1f, 0x9a, 0xd6, 0xb0, 0x3f, 0x98, 0x15,
	0xc0, 0x46, 0x2d, 0x70, 0xc2, 0xf1, 0x0e, 0x56, 0x6e, 0xbe, 0xc0, 0x3b, 0x9a, 0xc4, 0xc1, 0x33,
	0x67, 0x9c, 0x45, 0x01, 0x5d, 0x25, 0x6b, 0x16, 0xac, 0x73, 0x9e, 0x6d, 0x04, 0xe5, 0xe6, 0x0d,
	0xfc, 0xbe, 0x5c, 0x08, 0xf5, 0xb8, 0x7e, 0x08, 0x68, 0x12, 0xb7, 0x8d, 0xaf, 0x1d, 0xa5, 0xa2,
	0xfd, 0x4c, 0x13, 0x39, 0x17, 0x8b, 0x87, 0x53, 0xed, 0xfa, 0xf4, 0x3f, 0x00, 0x00, 0xff, 0xff,
	0x4d, 0x26, 0x94, 0x76, 0x52, 0x03, 0x00, 0x00,
}
